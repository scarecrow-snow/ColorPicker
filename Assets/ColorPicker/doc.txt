# Cursorエディタでカラーピッカーをつくってみた

## はじめに

UnityでカラーピッカーUIを自作する機会があり、開発にCursorエディタを使用してみました。
この記事では、カラーピッカーの実装とともに、Cursorエディタの使用感についても共有させていただきます。

## 完成したもの

[動画やGIFを入れる予定]

- HSVカラーモデルベースのカラーピッカー
- スライダー操作で直感的に色を選択可能
- R3を使用したリアクティブな実装
- Unity UIのみで実装

## 開発環境

- Unity 6 6000.0.29f1
- R3 (UniRxの後継ライブラリ)
- Cursorエディタ

## Cursorエディタとの出会い

もともとVSCodeユーザーだったのでAIアシスタントを利用するならと、何かと話題のCursorエディタを試してみました。
特に以下の点が印象的でした：

- コードの生成精度が高い
- 文脈を理解した的確な提案
- リファクタリング時の支援が優秀


## カラーピッカーの実装


### アーキテクチャ

MVPパターンを採用し、以下のような構成で実装しました：

#### Model (ColorPickerModel)
- HSV色空間での色情報の管理
- 色の状態変更の通知（R3のObservable）
- インターフェース（IColorPickerModel）による依存性の分離


### R3による実装

UniRxではなくR3を選択した理由：
- よりモダンな設計
- パフォーマンスの向上
- 必要十分な機能



### 開発中のCursorエディタ活用例

まずは、雑に既存のカラーピッカーのリポジトリなどを参考に、自分でコードを書いてみました。
あらかた機能ができてから、CursorエディタのAIアシスタントを活用しました。

1. コード生成での活用
```
プロンプト例：
"この機能をShaderに移行してください"
"MVPの観点にもとづいて設計しなおしてください"
```

2. リファクタリングでの活用
- 設計のし直しが優秀だった。MVPの設計をよく理解しており、設計を提案してくれた。
- コードの最適化など。これについては、そもそも冗長なコードを書く場合があるようだ。指摘して修正するという作業が何度かあった。

3. バグ修正での活用
- エラーメッセージの解析。これはCatGPTなどでもお馴染みで、十分に機能した。


### つまづいたポイント
- メモリリークを起こす。AIアシスタントのUnityへの理解が足りないようでMaterialの解放漏れを起こしていた。
- 設計のしなおしを要求した場合に、すべての機能を移植してくれるわけではなかった。都度、要求すれば対処可能。


## Cursorエディタの良かった点・改善点

### 良かった点
- コンテキストを理解した提案。コードの設計を理解しており、意図を汲み取ってくれる。
- リファクタリングの精度。十分に強力であった。

### 改善してほしい点
- 今回R3を使用したが、UniRxのコードを提案してくる。新しめのライブラリは反映が遅いようだ。


## まとめ

カラーピッカーの実装を通じて、Cursorエディタの実力を体感できました。
AIアシストの支援により、開発効率が大きく向上し、特にリファクタリング（本当にすごい！！）や
バグ修正の場面で威力を発揮しました。

完成したコードはGitHubで公開しています：
[https://github.com/scarecrow-snow/ColorPicker]

## 参考資料
- R3のドキュメント
- Cursorエディタの公式サイト
